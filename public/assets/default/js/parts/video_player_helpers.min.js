/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************************!*\
  !*** ./resources/js/parts/video_player_helpers.js ***!
  \****************************************************/
var fileVideoPlayer;

window.makeVideoPlayerHtml = function (path, storage, height, tagId) {
  var html = '';
  var options = {
    autoplay: false,
    preload: 'auto',
    controls: true,
  };
  var plugins = {
    resolutionSelector: {
      force_types: ['video/mp4', 'video/webm'],
      default_res: '480' // Default resolution
    }
  };

  const resolutions = ['360', '480', '720', '1080'];
  const sourcesHtml = resolutions.map(res => `<source data-res="${res}" src="${path.replace('480', res)}" type="video/mp4"/>`).join('');

  if (storage === 'youtube' || storage === 'vimeo') {
    html = `<video id="${tagId}" class="video-js" width="100%" height="${height}">
              ${sourcesHtml}
            </video>`;
    options.techOrder = ['html5', storage];
    options.sources = [{ src: path, type: `video/${storage}` }];
  } else if (storage === "secure_host") {
    // Use resolution buttons for secure_host
    html = `<div id="${tagId}-container">
              <iframe id="${tagId}" src="${path.replace('480', plugins.resolutionSelector.default_res)}" 
                      class="img-cover bg-gray200" 
                      frameborder="0" 
                      allowfullscreen="true" 
                      width="100%" 
                      height="${height}">
              </iframe>
              <div class="resolution-buttons">
                ${resolutions.map(res => `<button onclick="changeIframeResolution('${tagId}', '${path}', '${res}')">${res}p</button>`).join('')}
              </div>
            </div>`;
  } else {
    html = `<video id="${tagId}" oncontextmenu="return false;" controlsList="nodownload" class="video-js" controls preload="auto" width="100%" height="${height}">
              ${sourcesHtml}
            </video>`;
  }

  return {
    html: html,
    options: options,
    plugins: plugins
  };
};

// Function to change iframe resolution
window.changeIframeResolution = function (tagId, path, resolution) {
  document.getElementById(tagId).src = path.replace('480', resolution);
};

window.handleVideoByFileId = function (fileId, $contentEl, callback) {
  closeVideoPlayer();
  var height = $(window).width() > 991 ? 426 : 264;
  $.post('/course/getFilePath', { file_id: fileId }, function (result) {
    if (result && result.code === 200) {
      var storage = result.storage;
      var videoTagId = 'videoPlayer' + fileId;
      var { html, options, plugins } = makeVideoPlayerHtml(result.path, storage, height, videoTagId);

      if ($contentEl) {
        $contentEl.html(html);
      }
      if (storage !== "secure_host") {
        fileVideoPlayer = videojs(videoTagId, options, plugins);
      }
      callback();
    } else {
      $.toast({
        heading: notAccessToastTitleLang,
        text: notAccessToastMsgLang,
        bgColor: '#f63c3c',
        textColor: 'white',
        hideAfter: 10000,
        position: 'bottom-right',
        icon: 'error'
      });
    }
  }).fail(function (err) {
    $.toast({
      heading: notAccessToastTitleLang,
      text: notAccessToastMsgLang,
      bgColor: '#f63c3c',
      textColor: 'white',
      hideAfter: 10000,
      position: 'bottom-right',
      icon: 'error'
    });
  });
};

window.closeVideoPlayer = function () {
  if (fileVideoPlayer !== undefined) {
    fileVideoPlayer.dispose();
  }
};

window.pauseVideoPlayer = function () {
  if (fileVideoPlayer !== undefined) {
    fileVideoPlayer.pause();
  }
};
/******/ })()
;
